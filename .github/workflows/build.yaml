name: Java CI with Maven

on:
  push:

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # checkout project
      - uses: actions/checkout@v4
      # initialize Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      # build project
      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests
      # Run tests
      - name: Test with Maven and generate report
        run: mvn test
      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: app/target/site/jacoco/jacoco.csv
      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
      - name: Commit and push the badge if it changed
        uses: EndBug/add-and-commit@v7
        with:
          default_author: github_actions
          message: 'docs: update coverage badge'
          add: '*.svg'
      # Upload test report
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco
          path: app/target/site/jacoco

  performance-test:
    name: Performance test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run docker-compose
        working-directory: deployment/performance-test
        run: docker-compose up -d
      - name: Wait for the pod terminated
        run: |
          while [ "$(docker ps -q -f name=jmeter)" ]; do
            echo "Jmeter is still running"          
            sleep 5
          done
      # echo statistics.json file to the console
      - name: Show statistics.json
        working-directory: scripts
        run: |
          markdown_content=$(python3 markdown_generator.py)
          echo "$markdown_content" >> $GITHUB_STEP_SUMMARY
      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-reports
          path: deployment/performance-test/reports
